import random

from pandas.testing import assert_frame_equal

from cities.queries.causal_insight_slim import CausalInsightSlim as CausalInsight
from cities.utils.data_grabber import list_interventions, list_outcomes


def test_grouped_predictions():
    interventions = list_interventions()
    outcomes = list_outcomes()
    intervention = random.choice(interventions)
    outcome = random.choice(outcomes)

    year = 2017

    texas = [
        48061,
        48471,
        48423,
        48303,
        48375,
        48455,
        48441,
        48001,
        48215,
        48355,
        48281,
        48181,
        48201,
        48059,
        48007,
        48439,
        48485,
        48361,
        48265,
        48465,
        48277,
        48141,
        48347,
        48193,
        48349,
        48037,
        48027,
        48379,
        48503,
        48099,
        48063,
        48409,
        48373,
        48005,
        48407,
        48029,
        48363,
        48469,
        48241,
        48083,
        48425,
        48139,
        48451,
        48035,
        48143,
        48053,
        48113,
        48199,
        48323,
        48429,
        48171,
        48399,
        48243,
        48309,
        48073,
        48021,
        48223,
        48411,
        48145,
        48467,
        48043,
        48077,
        48257,
        48499,
        48385,
        48039,
        48381,
        48497,
        48179,
        48015,
        48041,
        48273,
        48325,
        48019,
        48387,
        48319,
        48183,
        48049,
        48279,
        48225,
        48115,
        48287,
        48025,
        48253,
        48067,
        48291,
        48167,
        48463,
        48501,
        48017,
        48185,
        48307,
        48245,
        48125,
        48217,
        48149,
        48009,
        48267,
        48275,
        48197,
        48445,
        48299,
        48419,
        48333,
        48103,
        48213,
        48477,
        48147,
        48401,
        48189,
        48481,
        48023,
        48491,
        48219,
        48081,
        48159,
        48165,
        48413,
        48269,
        48031,
        48095,
        48289,
        48315,
        48295,
        48367,
        48449,
        48221,
        48431,
        48479,
        48293,
        48259,
        48327,
        48071,
        48331,
        48195,
        48091,
        48473,
        48415,
        48211,
        48353,
        48487,
        48065,
        48169,
        48263,
        48237,
        48369,
        48089,
        48157,
        48209,
        48151,
        48079,
        48111,
        48229,
        48055,
        48203,
        48239,
        48321,
        48453,
        48457,
        48231,
        48403,
        48391,
        48251,
        48207,
        48447,
        48377,
        48459,
        48121,
        48343,
        48397,
        48271,
        48119,
        48085,
        48133,
        48033,
        48351,
        48339,
        48135,
        48093,
        48097,
        48075,
        48341,
        48335,
        48417,
        48345,
        48395,
        48107,
        48003,
        48337,
        48187,
        48249,
        48117,
        48069,
        48493,
        48357,
        48305,
        48105,
        48483,
        48433,
        48129,
        48191,
        48371,
        48205,
        48155,
        48087,
        48421,
        48313,
        48329,
        48285,
        48297,
        48365,
        48437,
        48359,
        48057,
        48475,
        48051,
        48163,
        48489,
        48427,
        48011,
        48101,
        48405,
        48393,
        48495,
        48161,
        48175,
        48435,
        48261,
        48131,
        48013,
        48247,
        48153,
        48461,
        48507,
        48177,
        48227,
        48047,
        48137,
        48235,
        48173,
        48505,
        48123,
        48255,
        48311,
        48045,
        48283,
        48443,
        48127,
        48383,
        48317,
        48233,
        48301,
        48389,
        48109,
    ]
    fips = random.choice(texas)
    n = int(random.choice([3, 6, 9]))
    tf = random.sample(texas, k=n)
    tf.append(fips)
    n = int(random.choice([3, 6, 9]))
    tf = tf + random.sample(texas, k=n)

    ci = CausalInsight(
        outcome_dataset=outcome,
        intervention_dataset=intervention,
        num_samples=1000,
    )
    ci.get_tau_samples()

    ci.get_fips_predictions(
        intervened_value=80, fips=fips, year=year, intervention_is_percentile=True
    )
    ci.get_group_predictions(
        tf, intervened_value=80, year=year, intervention_is_percentile=True
    )

    assert_frame_equal(
        ci.predictions,
        ci.group_predictions[fips],
        check_exact=False,
        check_dtype=False,
        rtol=0.01,
    )

    # with slider and original
    percent_calc = ci.slider_values_to_interventions(intervened_percent=60, year=year)
    ci.get_fips_predictions(
        intervened_value=percent_calc["intervened_transformed"],
        fips=fips,
        year=year,
        intervention_is_percentile=True,
    )

    ci.get_group_predictions(
        tf,
        intervened_value=percent_calc["intervened_transformed"],
        year=year,
        intervention_is_percentile=True,
        produce_original=True,
    )

    assert_frame_equal(
        ci.predictions,
        ci.group_predictions[fips],
        check_exact=False,
        check_dtype=False,
        rtol=0.01,
    )

    assert_frame_equal(
        ci.predictions_original.reset_index(drop=True),
        ci.group_predictions_original[fips],
        check_exact=False,
        check_dtype=False,
        rtol=0.01,
    )
