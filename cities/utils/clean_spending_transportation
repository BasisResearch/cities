import numpy as np
import pandas as pd

from cities.utils.cleaning_utils import standardize_and_scale
from cities.utils.data_grabber import DataGrabber



def clean_spending_transportation():
    data = DataGrabber()
    data.get_features_wide(["gdp"])
    gdp = data.wide
    gdp = gdp.get("gdp")
    
    
    spending_transportation = pd.read_csv("../data/raw/spending_transportation.csv")
   
    transportUnwanted = spending_transportation[(pd.isna(spending_transportation['total_obligated_amount']) | 
                                    (spending_transportation['total_obligated_amount'] == 1) |
                                    (spending_transportation['total_obligated_amount'] == 0))] 
  
    exclude_mask = spending_transportation['total_obligated_amount'].isin(transportUnwanted['total_obligated_amount'])
    spending_transportation = spending_transportation[~exclude_mask]  # 66 values removed 

    assert spending_transportation.isna().sum().sum() == 0, 'Na values detected'
   

    # loading names and repearing fips of value 3 and shorter

    names_transportation = pd.read_csv("../data/raw/spending_transportation_names.csv")

    short_geofips = spending_transportation[spending_transportation['GeoFIPS'].astype(str).str.len().between(1, 3)]
    geofips_to_geonamealt = dict(zip(names_transportation['GeoFIPS'], names_transportation['GeoNameALT']))

    short_geofips['GeoNameALT'] = short_geofips['GeoFIPS'].map(geofips_to_geonamealt)
    short_geofips = short_geofips.rename(columns={'GeoFIPS': 'damagedFIPS'})
    
    short_geofipsmapping_dict = dict(zip(gdp['GeoName'], gdp['GeoFIPS']))

    short_geofips['repairedFIPS'] = short_geofips['GeoNameALT'].apply(lambda x: short_geofipsmapping_dict.get(x))
    repaired_geofips = short_geofips[short_geofips['repairedFIPS'].notna()]

    assert (repaired_geofips.shape[0] / short_geofips.shape[0]) < 0.9, 'Less than 0.9 of short FIPS were successfully repaired!'

    spending_transportation['GeoFIPS'] = spending_transportation['GeoFIPS'].replace(
    dict(zip(repaired_geofips['damagedFIPS'], repaired_geofips['repairedFIPS']))
    )

    count_short_geofips = spending_transportation[spending_transportation['GeoFIPS'] <= 999]['GeoFIPS'].count()
    assert count_short_geofips / spending_transportation.shape[0] < 0.05, 'More than 0.05 of FIPS are short and will be deleted!'

    spending_transportation = spending_transportation[spending_transportation['GeoFIPS'] > 999]